open Syntax


(* DS version *)
exception Term2_error
exception Term_error
exception Value_error
let rec term t env cont =
  let rec value v env cont =
    let rec term2 t env cont = match t with
        Var (v) -> fun k -> App (k, value (Var v) env cont)
      | App (e1, e2) -> fun k -> (term e1 env cont) (fun m -> (term e2 env cont) (fun n -> App (App (m,n),k)))
      | _ -> raise Term2_error
    in
    (* value *)
    match v with
      Number (n) -> Number (n)
    | Var (x) -> Var (Env.get env x)
    | Fun (x, t) ->
      let x = Gensym.f "x" in
      let k = Gensym.f "k" in
      let env2 = Env.add (Env.add env "x" x) "k" k in
      Fun (x, Fun (k, (term2 t env2 cont) (Var k)))
    | _ -> raise Value_error
  in
  (* term *)
  match t with
    Number (n) -> fun kappa -> kappa (value (Number n) env cont)
  | Var (v) -> fun kappa -> kappa (value (Var v) env cont)
  | Fun (x, t) -> fun kappa -> kappa (value (Fun (x, t)) env cont)
  | App (e1, e2) ->
    let a = Gensym.f "a" in
    let env2 = Env.add env "a" a in
    fun kappa -> (term e1 env2 cont) (fun m -> (term e2 env2 cont) (fun n -> App(App(m,n),Fun(a,kappa (Var a)))))
  | _ -> raise Term_error

(* let rec term t =
 *   let rec value v =
 *     let rec term2 t = match t with
 *         Var (v) -> Fun (Var "k",App(Var "k",value (Var v)))
 *       | App (e1, e2) -> App(Fun(Var "k",term e1),App(Fun (Var "m",term e2),App(Fun(Var "n",App(Var "m",Var "n")),Var "k")))
 *       | _ -> Error "term2 error"
 *     in
 *     match v with
 *       Number (n) -> Number (n)
 *     | Var (x) -> Var (x)
 *     | Fun (x, t) -> Fun (Var "x", Fun (Var "k", App ((term2 t), Var "k")))
 *     | _ -> Error "value error"
 *   in
 *   match t with
 *     Number (n) -> Fun (Var "虜",App (Var "虜",value (Number n)))
 *   | Var (v) -> Fun (Var "虜",App (Var "虜",value (Var v)))
 *   | Fun (x, t) -> Fun (Var "虜",App (Var "虜",value (Fun (x, t))))
 *   | App (e1, e2) -> App (Fun (Var "虜",term e1),App (Fun (Var "m",term e2),App(Fun(Var "n",App (Var "m" , Var "n")),Fun(Var "a",App(Var "虜",Var "a")))))
 *   | _ -> Error "term error" *)






(* Eval.f : Syntax.t -> Syntax.t *)
let f program  = term program Env.empty_env (fun x -> Var (x))

